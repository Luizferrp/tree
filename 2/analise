analise tecnica do código:

o código se basea fortemente em recursão, usando o minimos de variáveis, sem caches, sem vetores de suporte ou
outras estruturas que poderiam fornecer performace pela troca de gasto maior de memoria; assim provavelemente
o código vai apresentar desempenho proximo de O(n)

inserção: buscar rersiva, atualizando a altura dos nós visitados, até o no que tenha um galho livre, é
verificado o balanceamento e feito se nescessário tal que deve se rodar as folhas até o equilibrio, apos cada
inserção; depois, passa-se o node atualizado recursivamente com seus nodes pais até tudo estar atualizado
remoção: busca recursica, atualziando a altura dos nodes até o node objetivo, se n tiver filhos, basta ele se
passar como null pro pai, aí balanceamento; se tiver 1, o colocamos no lugar do a ser removido; se tiver 2 econtramos
o sucessor in-order, e balanceamento, tudo sempre seguido de balanceamento, que é basicamente reordenas o nodes
filhos

iniciando testes de inserçao com 100 elementos: 0.700217 milissegundos
iniciando testes de busca com 100 elementos: 0.10234 milissegundos
iniciando testes de remoção com 100 elementos: 0.311242 milissegundos
iniciando testes de inserçao com 500 elementos: 0.582931 milissegundos
iniciando testes de busca com 500 elementos: 0.14038 milissegundos
iniciando testes de remoção com 500 elementos: 0.498001 milissegundos
iniciando testes de inserçao com 1000 elementos: 0.754659 milissegundos
iniciando testes de busca com 1000 elementos: 0.223605 milissegundos
iniciando testes de remoção com 1000 elementos: 0.797046 milissegundos
iniciando testes de inserçao com 10000 elementos: 7.170936 milissegundos
iniciando testes de busca com 10000 elementos: 1.710259 milissegundos
iniciando testes de remoção com 10000 elementos: 6.239659 milissegundos
iniciando testes de inserçao com 20000 elementos: 16.304167 milissegundos
iniciando testes de busca com 20000 elementos: 3.576664 milissegundos
iniciando testes de remoção com 20000 elementos: 13.085067 milissegundos

analize de inserção:

100   elementos: 0.700217  milissegundos
500   elementos: 0.582931 milissegundos
1000  elementos: 0.754659 milissegundos
10000 elementos: 7.170936 milissegundos
20000 elementos: 16.304167 milissegundos
considerando variações de interrupção do sistema, o código apresenta desempenho próximo a O(n)

analize de busca:

100   elementos: 0.10234  milissegundos
500   elementos: 0.14038 milissegundos
1000  elementos: 0.223605 milissegundos
10000 elementos: 1.710259 milissegundos
20000 elementos: 3.576664 milissegundos
considerando variações de interrupção do sistema, o código apresenta desempenho próximo a O(n)

analize de remoção:

100   elementos: 0.311242  milissegundos
500   elementos: 0.498001 milissegundos
1000  elementos: 0.797046 milissegundos
10000 elementos: 6.239659 milissegundos
20000 elementos: 13.085067 milissegundos
considerando variações de interrupção do sistema, o código apresenta desempenho próximo a O(n)
