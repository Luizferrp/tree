analise tecnica do código:

o código se basea fortemente em recursão, usando o minimos de variáveis, sem caches, sem vetores de suporte ou
outras estruturas que poderiam fornecer performace pela troca de gasto maior de memoria; assim provavelemente
o código vai apresentar desempenho proximo de O(n)

devido a recursão foram add métodos de abstração com sobrecarga de função; remver, o recusivo, compara o valor
buscado com o node passado; com base nas propridades da arvore, passa proproximo até achar o objetivo. Caso
o node em questão n tenha filhos, é possivel apenas deleta-lo, passando ele mesmo como null para o node pai
que chamou a função de remover, e recursivamente; caso o node tenha 1 filho, ent passamos o filho para o atual
caso o node tenha 2 filhos, acha-se o maior valor na subarvore da esquerda e passa-o;

a inserção apenas verifica se deve ir pra direita ou esquerda, até achar um pointer null e poder se estabelecer
a busca verifica assim como a inserção, mas só até achar o valor

a arvore implementada no exercicio 1 apresenta a seguinte saida:

iniciando testes de inserçao com 100 elementos:
0.18718 milissegundos
iniciando testes de busca com 100 elementos:
0.091035 milissegundos
iniciando testes de remoção com 100 elementos:
0.108904 milissegundos
iniciando testes de inserçao com 500 elementos:
0.112799 milissegundos
iniciando testes de busca com 500 elementos:
0.100993 milissegundos
iniciando testes de remoção com 500 elementos:
0.108772 milissegundos
iniciando testes de inserçao com 1000 elementos:
0.171435 milissegundos
iniciando testes de busca com 1000 elementos:
0.206974 milissegundos
iniciando testes de remoção com 1000 elementos:
0.191827 milissegundos
iniciando testes de inserçao com 10000 elementos:
2.47218 milissegundos
iniciando testes de busca com 10000 elementos:
2.332754 milissegundos
iniciando testes de remoção com 10000 elementos:
2.826371 milissegundos
iniciando testes de inserçao com 20000 elementos:
6.717813 milissegundos
iniciando testes de busca com 20000 elementos:
3.323186 milissegundos
iniciando testes de remoção com 20000 elementos:
3.932213 milissegundos

analize de inserção:

100   elementos: 0.18718 milissegundos
500   elementos: 0.112799 milissegundos
1000  elementos: 0.171435 milissegundos
10000 elementos: 2.47218 milissegundos
20000 elementos: 6.717813 milissegundos
considerando variações de interrupção do sistema, o código apresenta desempenho próximo a O(n)

analize de busca:

100   elementos: 0.091035 milissegundos
500   elementos: 0.100993 milissegundos
1000  elementos: 0.206974 milissegundos
10000 elementos: 2.332754 milissegundos
20000 elementos: 3.323186 milissegundos
considerando variações de interrupção do sistema, o código apresenta desempenho próximo a O(n)

analize de remoção:

100   elementos: 0.108904 milissegundos
500   elementos: 0.108772 milissegundos
1000  elementos: 0.191827 milissegundos
10000 elementos: 2.826371 milissegundos
20000 elementos: 3.932213 milissegundos
considerando variações de interrupção do sistema, o código apresenta desempenho próximo a, o(1) até 1000, e o(n) acima disso
